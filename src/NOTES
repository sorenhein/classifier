2018-07-14
----------

* Small histogram of #trains in matches vector
  - Should we go to 4?
  - Should we improve the distance function in Clusters?
    - Intra clusters
    - warp
    - balance

* Do _N and _R have same clusters?


* Try to match up each entry in matches with the actual trace.
  This will give us the best [3] start/end points for each actual
  trace vs the distance trace.
  - Up to [2] peaks from actual trace can stick out on either end
  - Can match up actual start anywhere from start of distance trace
  - Can match up actual end anywhere from end of distance trace
  - Once we're moored at either end, do a squared distance of actual
    to distance trace
    - Each actual peak is matched to nearest unused distance peak
    - In the end we look at unmatched peaks on both sides --
      some penalty for this
    - Add up square distances

* Probably cut those actual peaks that are very far from distance peaks

* Correlate the rest on both sides

* Add up
  - Residuals
  - Added, subtracted
  - Missing, extras


Overall algorithm
-----------------

* Peak _positions_: 
  - Just do double integral.
  - Maybe force to 0.
  - Find envelope.
  - Detect peak positions.

* Then run the train matcher.

* Then look for peaks in the right places
  - Scale by v and a and shift by d
  - Know where there are quiet intervals as well
  - Integrate up and down
  - Find envelope
  - Detect peak values

* Check against laser measurements!

