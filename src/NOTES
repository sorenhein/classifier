2018-09-15
----------
Possible flow:

- Run K means as is, maybe with more dispersed starting points
- Accepted clusters
  - At least 3 entries that also have measure +
  - At least 80% have measure +
    - +   -> tentative
    - 1-2 -> interesting
    - 2-6 -> conceivable
    - > 6 -> rejected
- All other peaks
  Similar, but no tentative ones (all low ones -> interesting)
- All peaks in first 400 samples (0.2 s) go are transient


Starting with the interesting ones

- Extract some key periodicity parameters
  - Cluster neighbors (same parameters as single peaks, but two
    together now in the distance measure), hoping to find a strong
    signal for the bogeys.  Might be two clusters or even more.
    - tentatively accepted bogeys
  - For the tentative singles, look for neighbor peaks together with 
    which they would fit a bogey cluster?
    - Look everywhere except in rejected.  Early only if it makes
      quantitative sense (how?)
  - Drop remaining singles except at the beginning and end
  


PeakStats: Not global, but passed in.
log the category (train or sensor).
Output csv.

Log measure in peak as part of annotate.

Give out the whole PeakList, don't copy into PeakTime?
Store time in PeakList as well.
Call peakList peaks.



2018-09-14
----------
We often get the 2nd of maxima above the line.  sensor34, 180956, #2.

Maybe transients can be reduced with filter padding as in filtfilt.

Do we need to reduce positive minima?  Negative maxima?

Eliminate clusters based on unusual single-parameter values?


2018-09-02
----------
* Improve the recognition (currently 1072 / 1778 = 60.3%)

* Add separate timers for pre-align and align

* Clean up driver.cpp

2018-07-17
----------
* Some _N and _R trains are almost impossible to separate
  - ICE4_DEU_28 is probably symmetric, in fact?
  - ICE2_DEU_48 ditto?
  - ICE1_old_CHE_56 ditto? [delete?]
  - ICE4_DEU_28 and ICET_DEU_28 have extremely similar ratios

* In doc, make the comments from Train axles.xlsx

* Files to finish:
  SynthTrain cpp and h
  driver.cpp

Visual          OK
mingw           OK
gcc
Mac gcc
Mac clang
Linux

Overall algorithm
-----------------

* Check against laser measurements!
* Output a diagram with the wagons suggested
* throw/catch with error codes (like Build)
* filtfilt padding, how?
* Make independent of sample rate (other than Butterworth?)
* Move to less padding in SegQuiet back
* Implement displacement algorithms
  - Our integration
  - Some kind of scalar product
  - Estimate parameters of the flanks?  What kind of function?
  - Also add timers
* Float (Accel) to double everywhere
* Simpson integration?
